package zuc

import (
	"testing"

	"github.com/stretchr/testify/require"
)

// ref: https://www.gsma.com/security/wp-content/uploads/2019/05/eea3eia3testdatav11.pdf
func TestZuc(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name   string
		k      []byte
		iv     []byte
		z      []uint32
		length uint32
	}{
		{
			name:   "TestCase1",
			k:      []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			iv:     []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			z:      []uint32{0x27bede74, 0x018082da},
			length: 2,
		},
		{
			name:   "TestCase2",
			k:      []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			iv:     []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			z:      []uint32{0x0657cfa0, 0x7096398b},
			length: 2,
		},
		{
			name:   "TestCase3",
			k:      []byte{0x3d, 0x4c, 0x4b, 0xe9, 0x6a, 0x82, 0xfd, 0xae, 0xb5, 0x8f, 0x64, 0x1d, 0xb1, 0x7b, 0x45, 0x5b},
			iv:     []byte{0x84, 0x31, 0x9a, 0xa8, 0xde, 0x69, 0x15, 0xca, 0x1f, 0x6b, 0xda, 0x6b, 0xfb, 0xd8, 0xc7, 0x66},
			z:      []uint32{0x14f1c272, 0x3279c419},
			length: 2,
		},
		{
			name:   "TestCase4",
			k:      []byte{0x4d, 0x32, 0x0b, 0xfa, 0xd4, 0xc2, 0x85, 0xbf, 0xd6, 0xb8, 0xbd, 0x00, 0xf3, 0x9d, 0x8b, 0x41},
			iv:     []byte{0x52, 0x95, 0x9d, 0xab, 0xa0, 0xbf, 0x17, 0x6e, 0xce, 0x2d, 0xc3, 0x15, 0x04, 0x9e, 0xb5, 0x74},
			z:      []uint32{0xed4400e7, 0x0633e5c5},
			length: 2,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			ks := Zuc(tc.k, tc.iv, tc.length)
			require.Equal(t, tc.z, ks)
		})
	}
}
